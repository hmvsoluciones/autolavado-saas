package com.hmvsoluciones.domain;

import static com.hmvsoluciones.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class FacturaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFacturaAllPropertiesEquals(Factura expected, Factura actual) {
        assertFacturaAutoGeneratedPropertiesEquals(expected, actual);
        assertFacturaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFacturaAllUpdatablePropertiesEquals(Factura expected, Factura actual) {
        assertFacturaUpdatableFieldsEquals(expected, actual);
        assertFacturaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFacturaAutoGeneratedPropertiesEquals(Factura expected, Factura actual) {
        assertThat(actual)
            .as("Verify Factura auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFacturaUpdatableFieldsEquals(Factura expected, Factura actual) {
        assertThat(actual)
            .as("Verify Factura relevant properties")
            .satisfies(a -> assertThat(a.getNumero()).as("check numero").isEqualTo(expected.getNumero()))
            .satisfies(a -> assertThat(a.getFechaEmision()).as("check fechaEmision").isEqualTo(expected.getFechaEmision()))
            .satisfies(a -> assertThat(a.getTotal()).as("check total").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getTotal()))
            .satisfies(a -> assertThat(a.getActivo()).as("check activo").isEqualTo(expected.getActivo()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFacturaUpdatableRelationshipsEquals(Factura expected, Factura actual) {
        assertThat(actual)
            .as("Verify Factura relationships")
            .satisfies(a -> assertThat(a.getVenta()).as("check venta").isEqualTo(expected.getVenta()));
    }
}

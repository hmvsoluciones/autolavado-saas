package com.hmvsoluciones.domain;

import static com.hmvsoluciones.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ProductoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductoAllPropertiesEquals(Producto expected, Producto actual) {
        assertProductoAutoGeneratedPropertiesEquals(expected, actual);
        assertProductoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductoAllUpdatablePropertiesEquals(Producto expected, Producto actual) {
        assertProductoUpdatableFieldsEquals(expected, actual);
        assertProductoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductoAutoGeneratedPropertiesEquals(Producto expected, Producto actual) {
        assertThat(actual)
            .as("Verify Producto auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductoUpdatableFieldsEquals(Producto expected, Producto actual) {
        assertThat(actual)
            .as("Verify Producto relevant properties")
            .satisfies(a -> assertThat(a.getNombre()).as("check nombre").isEqualTo(expected.getNombre()))
            .satisfies(a -> assertThat(a.getDescripcion()).as("check descripcion").isEqualTo(expected.getDescripcion()))
            .satisfies(a ->
                assertThat(a.getPrecio()).as("check precio").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getPrecio())
            )
            .satisfies(a -> assertThat(a.getCantidad()).as("check cantidad").isEqualTo(expected.getCantidad()))
            .satisfies(a -> assertThat(a.getFechaActualizacion()).as("check fechaActualizacion").isEqualTo(expected.getFechaActualizacion())
            )
            .satisfies(a -> assertThat(a.getActivo()).as("check activo").isEqualTo(expected.getActivo()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductoUpdatableRelationshipsEquals(Producto expected, Producto actual) {
        assertThat(actual)
            .as("Verify Producto relationships")
            .satisfies(a -> assertThat(a.getCategoriaProducto()).as("check categoriaProducto").isEqualTo(expected.getCategoriaProducto()));
    }
}

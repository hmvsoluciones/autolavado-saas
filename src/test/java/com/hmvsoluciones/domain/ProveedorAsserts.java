package com.hmvsoluciones.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProveedorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProveedorAllPropertiesEquals(Proveedor expected, Proveedor actual) {
        assertProveedorAutoGeneratedPropertiesEquals(expected, actual);
        assertProveedorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProveedorAllUpdatablePropertiesEquals(Proveedor expected, Proveedor actual) {
        assertProveedorUpdatableFieldsEquals(expected, actual);
        assertProveedorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProveedorAutoGeneratedPropertiesEquals(Proveedor expected, Proveedor actual) {
        assertThat(actual)
            .as("Verify Proveedor auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProveedorUpdatableFieldsEquals(Proveedor expected, Proveedor actual) {
        assertThat(actual)
            .as("Verify Proveedor relevant properties")
            .satisfies(a -> assertThat(a.getNombre()).as("check nombre").isEqualTo(expected.getNombre()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getTelefono()).as("check telefono").isEqualTo(expected.getTelefono()))
            .satisfies(a -> assertThat(a.getRazonSocial()).as("check razonSocial").isEqualTo(expected.getRazonSocial()))
            .satisfies(a -> assertThat(a.getRfc()).as("check rfc").isEqualTo(expected.getRfc()))
            .satisfies(a -> assertThat(a.getActivo()).as("check activo").isEqualTo(expected.getActivo()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProveedorUpdatableRelationshipsEquals(Proveedor expected, Proveedor actual) {
        // empty method
    }
}

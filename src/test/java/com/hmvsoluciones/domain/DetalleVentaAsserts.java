package com.hmvsoluciones.domain;

import static com.hmvsoluciones.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class DetalleVentaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDetalleVentaAllPropertiesEquals(DetalleVenta expected, DetalleVenta actual) {
        assertDetalleVentaAutoGeneratedPropertiesEquals(expected, actual);
        assertDetalleVentaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDetalleVentaAllUpdatablePropertiesEquals(DetalleVenta expected, DetalleVenta actual) {
        assertDetalleVentaUpdatableFieldsEquals(expected, actual);
        assertDetalleVentaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDetalleVentaAutoGeneratedPropertiesEquals(DetalleVenta expected, DetalleVenta actual) {
        assertThat(actual)
            .as("Verify DetalleVenta auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDetalleVentaUpdatableFieldsEquals(DetalleVenta expected, DetalleVenta actual) {
        assertThat(actual)
            .as("Verify DetalleVenta relevant properties")
            .satisfies(a -> assertThat(a.getCantidad()).as("check cantidad").isEqualTo(expected.getCantidad()))
            .satisfies(a ->
                assertThat(a.getPrecioUnitario())
                    .as("check precioUnitario")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getPrecioUnitario())
            )
            .satisfies(a ->
                assertThat(a.getSubtotal()).as("check subtotal").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getSubtotal())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDetalleVentaUpdatableRelationshipsEquals(DetalleVenta expected, DetalleVenta actual) {
        assertThat(actual)
            .as("Verify DetalleVenta relationships")
            .satisfies(a -> assertThat(a.getVenta()).as("check venta").isEqualTo(expected.getVenta()))
            .satisfies(a -> assertThat(a.getProducto()).as("check producto").isEqualTo(expected.getProducto()));
    }
}
